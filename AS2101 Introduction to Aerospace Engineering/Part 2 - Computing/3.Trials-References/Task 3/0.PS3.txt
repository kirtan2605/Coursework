Root finding Numerical methods for f(x)=0
1.Bisection Method
	def bisector(f,a,b,e,N_Max)
give 2 limiting conditions
--|f(x)| < e, then stop. 
  where e is the error which we don't mind in the answer
--Number of iterations(N_max)
  limit on Maximum number of iterations
  
2.Newton's Method
given limiting conditions
--|f(x)| < e, then stop. 
  where e is the error which we don't mind in the answer
**Newton's method is much better and faster.
and we have to prove this using our computation results**

3.Secant Method


REPORT:
Everything in Python
Report should have 4 portions
INTRO : 
Theory section about each method along with figures and equations. 
Figures must have a caption
PLOTS,DISCUSSION,RESULTS AND ANALYSYS :

CONCLUSION AND INFERENCE :

REFERENCE :

on functions:
f1(x) = x^3 - 3x^2 - x + 9
f2(x) = (e^x)*f1(x)
choose 2 unique starting sets : 
Bisection: {-3,0} {-5,5}
Newton-Raphson: -3, 5

For Newton Method, also find for 
f3(x) = x^3 - 2x + 2
start at x=0
Comment on the Result


Plot f(x) vs N : 1 graph for each function! so we can see the difference in the rate at which the methods get the answer

------------------------------------------
PROGRESS TRACK
-Bisection Method : DONE
-Newton's Method : DONE
-Secant Method : NOT DONE

------------------------------------------
RESULTS
NOTE : f2(x) is nothing but f1(x)*e^x. 
we know that e^x is never zero, and hence, e^x just effects the slope of the graph and not the zeros.
This change in slope has no effect in the Bisection Method since this method uses the end points to calculate the next point
this significance of change in slope will be seen when we use the Newton's Method
This is bcz, Newton's Method uses the slope to calculate the next point

------------------------------------------

Algorithm - NEWTON RAPHSON

For a given function f(x),the Newton Raphson Method algorithm works as follows:

1. Start

2. Define function as f(x)

3. Define derivative of function as g(x)

4. Input:
	a. Initial guess x0 
	b. Tolerable Error e
	c. Maximum Iteration N

5. Do 
	If g(x0) = 0
		Print "Mathematical Error"
		Stop
	End If

    x(i+1) = x(i) - f(x) / g(x)  
	
	step = step + 1
	
	If step > N
		Print "Not Convergent"
		Stop
	End If

   While abs f(x1) > e 

7. Print root as x(i+1)

----------------------------------------

Algorithm - SECANT METHOD

For a given function f(x),the Secant Method algorithm works as follows:

1. Start 

2. Define function f(x)

3. Input
	a. initial guesses x0 and x1
	b. tolerable error e
    

5. Do 
	
    x_new = x1 -(f(x1)*(x1-x0))/(f(x1)-f(x0))
    x0 = x1
    x1 = x_new
    
    
   while (fabs(f(x_new)) > e)   // fabs -> returns absolute value 

6. Print root as x_new

7. Stop


8. Stop


